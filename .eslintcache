[{"/home/ec2-user/copoetry/front-end/src/index.js":"1","/home/ec2-user/copoetry/front-end/src/App.js":"2","/home/ec2-user/copoetry/front-end/src/react-auth0-spa.js":"3","/home/ec2-user/copoetry/front-end/src/history.js":"4","/home/ec2-user/copoetry/front-end/src/components/PrivateRoute.js":"5","/home/ec2-user/copoetry/front-end/src/components/WritePage/WritePage.js":"6","/home/ec2-user/copoetry/front-end/src/components/Header/Header.js":"7","/home/ec2-user/copoetry/front-end/src/components/ReadPage/ReadPage.js":"8","/home/ec2-user/copoetry/front-end/src/components/MyPoemsPage/MyPoemsPage.js":"9","/home/ec2-user/copoetry/front-end/src/components/WelcomePage/WelcomePage.js":"10","/home/ec2-user/copoetry/front-end/src/components/PoemPage/ReadPoemPage.js":"11","/home/ec2-user/copoetry/front-end/src/components/Background/Background.js":"12","/home/ec2-user/copoetry/front-end/src/utils.js":"13","/home/ec2-user/copoetry/front-end/src/components/PoemPage/PoemPage.js":"14","/home/ec2-user/copoetry/front-end/src/components/ReadPage/PoemPreview.js":"15","/home/ec2-user/copoetry/front-end/src/components/Poem/Poem.js":"16","/home/ec2-user/copoetry/front-end/src/components/WritePage/PoemInput.js":"17","/home/ec2-user/copoetry/front-end/src/components/Poem/Line.js":"18"},{"size":927,"mtime":1610903041170,"results":"19","hashOfConfig":"20"},{"size":1832,"mtime":1610902339849,"results":"21","hashOfConfig":"20"},{"size":3178,"mtime":1610902901511,"results":"22","hashOfConfig":"20"},{"size":87,"mtime":1610888556225,"results":"23","hashOfConfig":"20"},{"size":964,"mtime":1610888556225,"results":"24","hashOfConfig":"20"},{"size":1236,"mtime":1610888556225,"results":"25","hashOfConfig":"20"},{"size":935,"mtime":1610888556225,"results":"26","hashOfConfig":"20"},{"size":2505,"mtime":1610905617931,"results":"27","hashOfConfig":"20"},{"size":2716,"mtime":1610906027282,"results":"28","hashOfConfig":"20"},{"size":1172,"mtime":1610888556225,"results":"29","hashOfConfig":"20"},{"size":315,"mtime":1610888556225,"results":"30","hashOfConfig":"20"},{"size":424,"mtime":1610888556225,"results":"31","hashOfConfig":"20"},{"size":949,"mtime":1610888556225,"results":"32","hashOfConfig":"20"},{"size":5918,"mtime":1610903477316,"results":"33","hashOfConfig":"20"},{"size":1668,"mtime":1610888556225,"results":"34","hashOfConfig":"20"},{"size":3142,"mtime":1610888556225,"results":"35","hashOfConfig":"20"},{"size":1122,"mtime":1610888556225,"results":"36","hashOfConfig":"20"},{"size":310,"mtime":1610888556225,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"rvuo1n",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"/home/ec2-user/copoetry/front-end/src/index.js",[],["85","86"],"/home/ec2-user/copoetry/front-end/src/App.js",["87","88","89"],"import './App.css';\nimport {BrowserRouter, Route, Switch, Redirect} from \"react-router-dom\";\nimport {useAuth0} from \"./react-auth0-spa\";\nimport {useLoading, ThreeDots} from '@agney/react-loading';\nimport {css, styled} from 'css-zero/macro';\n\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Header from './components/Header/Header'\nimport WritePage from './components/WritePage/WritePage'\nimport ReadPage from './components/ReadPage/ReadPage'\nimport MyPoemsPage from \"./components/MyPoemsPage/MyPoemsPage\";\nimport ReadPoemPage from \"./components/PoemPage/ReadPoemPage\";\nimport WelcomePage from \"./components/WelcomePage/WelcomePage\"\nimport Background from \"./components/Background/Background\";\n\nfunction App() {\n    const {isAuthenticated} = useAuth0();\n    const { loading } = useAuth0();\n\n    return <div>\n        <Background/>\n        {loading ? <ThreeDots className=\"big-loader\" width=\"100\"/> :\n            <div className=\"app-wrapper\">\n                <BrowserRouter basename={'/copoetry'}>\n                    {isAuthenticated && <Header/>} {/*To-do: better logic for hiding header on Welcome*/}\n                    <Switch>\n                        <Route path='/welcome' component={WelcomePage}/>\n                        <PrivateRoute path='/write' component={WritePage}/>\n\n                        <PrivateRoute path='/read/:poemid' component={ReadPoemPage}/>\n                        <PrivateRoute path='/read' component={ReadPage}/>\n\n                        <PrivateRoute path='/my_poems/:poemid' component={ReadPoemPage}/>\n                        <PrivateRoute path='/my_poems' component={MyPoemsPage}/>\n                        <Redirect to={isAuthenticated ? 'write' : '/welcome'}/>\n                    </Switch>\n                </BrowserRouter>\n            </div>\n        }\n    </div>;\n}\n\nexport default App;\n","/home/ec2-user/copoetry/front-end/src/react-auth0-spa.js",[],"/home/ec2-user/copoetry/front-end/src/history.js",[],"/home/ec2-user/copoetry/front-end/src/components/PrivateRoute.js",[],"/home/ec2-user/copoetry/front-end/src/components/WritePage/WritePage.js",["90","91"],"import React, {useState} from \"react\";\nimport PoemPage from \"../PoemPage/PoemPage\";\nimport \"./writePage.css\"\nimport {REQ_STATUS} from \"../../utils\";\nimport {useAuth0} from \"../../react-auth0-spa\";\n\nfunction WritePage() {\n    const [error, setError] = useState(\"\");\n    const [addingPoem, setAddingPoem] = useState(false);\n    const [refresh, setRefresh] = useState(false);\n\n    return <div>\n        <p className=\"page-desc\">\n            {error === \"\" ?\n                (addingPoem ? <span>Choose a title and press enter to send.</span> : <span>Here's a poem someone started.\n            You get one shot to add a line. If you choose to skip, the poem flies away to someone else.\n                But if you don't, you can watch it grow under <i>my poems</i>.</span>)\n                : <span>{error}</span>\n            }\n        </p>\n        <div className={\"write-page-btn-con\" + (addingPoem ? ' hidden' : '') }>\n            <button onClick={() => setAddingPoem(true)}>Add Poem</button>\n            <button onClick={() => setRefresh(!refresh)}>Skip Poem</button>\n        </div>\n        <PoemPage random={true} editable={true} setParentError={setError} addingPoem={addingPoem} refresh={refresh}/>\n    </div>;\n}\n\nexport default WritePage;\n","/home/ec2-user/copoetry/front-end/src/components/Header/Header.js",["92"],"import React from \"react\"\nimport {useAuth0} from \"../../react-auth0-spa\";\nimport 'materialize-css';\nimport './header.css';\nimport {Link, NavLink} from \"react-router-dom\";\n\nfunction Header() {\n\n    const {isAuthenticated, logout, user} = useAuth0();\n    return <section className=\"header\">\n        <span className=\"header-links\">\n            <NavLink to=\"/read\" activeClassName=\"selected\">read</NavLink>\n            {isAuthenticated && <NavLink to=\"/write\" activeClassName=\"selected\">write</NavLink>}\n            {isAuthenticated && <NavLink to=\"/my_poems\" activeClassName=\"selected\">my poems</NavLink>}\n        </span>\n\n        {isAuthenticated && <span className=\"header-user-area\">\n            <span className=\"header-logout-label\">Not <span className=\"username\">{user.nickname}</span>?</span>\n            <span className=\"header-logout-btn\" onClick={logout}>Log Out</span>\n        </span>}\n\n    </section>\n}\n\nexport default Header;\n","/home/ec2-user/copoetry/front-end/src/components/ReadPage/ReadPage.js",["93","94"],"import React, {useEffect, useState} from \"react\";\nimport {REQ_STATUS} from \"../../utils\";\nimport Poem from \"../Poem/Poem\";\nimport Skeleton from \"react-loading-skeleton\";\nimport {useAuth0} from \"../../react-auth0-spa\";\nimport PoemPreview from \"./PoemPreview\";\n\nfunction ReadPage() {\n    const {\n        getTokenSilently\n    } = useAuth0();\n    const [poems, setPoems] = useState()\n    const [error, setError] = useState(\"\");\n    const [loadPoemsStatus, setLoadPoemsStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const [poemSkeletons, setPoemSkeletons] = useState([])\n    useEffect(() => {\n        const getPoems = async () => {\n            try {\n                setLoadPoemsStatus(REQ_STATUS.LOADING)\n                const token = await getTokenSilently();\n                // Send a GET request to the server and add the signed in user's\n                // access token in the Authorization header\n                const response = await fetch(\"/copoetry/api/get/poems/all?offset=0&length=20\", {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                });\n\n                const responseData = await response.json();\n                if (response.ok) {\n                    setLoadPoemsStatus(REQ_STATUS.SUCCESS)\n                    // To-Do: Check more thoroughly whether response is valid and log better errors.\n                    setPoems(responseData);\n                } else {\n                    setLoadPoemsStatus(REQ_STATUS.FAIL)\n                    setError(\"No poems yet... Go write some!\")\n                    console.error(responseData)\n                }\n            } catch (error) {\n                setLoadPoemsStatus(REQ_STATUS.FAIL)\n                setError(\"No poems yet... Go write some!\");\n                console.error(error)\n            }\n        };\n\n        function getPoemSkeletons(n) {\n            return Array.from({length: n}, (x, idx) => <Skeleton key={\"poem-skeleton-\"+idx} height={n}/>)\n        }\n\n        getPoems();\n        setPoemSkeletons(getPoemSkeletons(10));\n    }, [getTokenSilently, setError, setPoems, setPoemSkeletons]);\n\n    return <div className=\"read-page\">\n        {\n            loadPoemsStatus <= REQ_STATUS.LOADING ? poemSkeletons :\n            (error == \"\" && poems\n                ? poems.map((poem, idx) => <PoemPreview poem={poem} linkPrefix={\"read\"} key={idx}/>)\n                : <span className=\"error\">{error}</span>\n            )\n        }\n    </div>\n}\n\nexport default ReadPage;\n","/home/ec2-user/copoetry/front-end/src/components/MyPoemsPage/MyPoemsPage.js",["95"],"/home/ec2-user/copoetry/front-end/src/components/WelcomePage/WelcomePage.js",["96"],"import React, {useState} from \"react\"\nimport {useAuth0} from \"../../react-auth0-spa\";\nimport {Redirect} from \"react-router-dom\"\nimport {Button} from \"react-materialize\";\nimport ParticleEffectButton from 'react-particle-effect-button'\n\nimport './welcome.css'\n\nconst PARTICLE_DURATION = 700;\nfunction WelcomePage() {\n    const {isAuthenticated, loginWithRedirect} = useAuth0();\n    let [loginClicked, setLoginClicked] = useState();\n\n    function loginClick() {\n        setLoginClicked(true);\n        setTimeout(loginWithRedirect, PARTICLE_DURATION * 0.5)\n    }\n\n    if (isAuthenticated)\n        return <Redirect to='/write'/>\n    return <div className=\"welcome-con\">\n        <h2>\"None of us is as smart as all of us.\" <span>—&nbsp;&nbsp;&nbsp;Ken Blanchard</span></h2>\n        <p>You add a line, she adds a line... See what you can create.</p>\n        <ParticleEffectButton color='#A2D2FF' hidden={loginClicked}\n        duration={PARTICLE_DURATION} direction=\"top\" className=\"welcome-login-btn-con\">\n            <button className=\"welcome-login-btn\" onClick={loginClick}>LOG IN VIA AUTH0</button>\n        </ParticleEffectButton>\n    </div>;\n}\n\nexport default WelcomePage;\n","/home/ec2-user/copoetry/front-end/src/components/PoemPage/ReadPoemPage.js",[],"/home/ec2-user/copoetry/front-end/src/components/Background/Background.js",[],"/home/ec2-user/copoetry/front-end/src/utils.js",["97"],"export const REQ_STATUS = {\n    NOT_STARTED: 0,\n    LOADING: 1,\n    SUCCESS: 2,\n    FAIL: 3\n};\n/*\n * Returns CSS class name corresponidng to request status.\n * Used all across the App with according CSS classes.\n */\nexport function getRequestStatusClass(status) {\n    switch(status) {\n        case REQ_STATUS.NOT_STARTED:\n            return \"req-not-started\"\n        case REQ_STATUS.LOADING:\n            return \"req-pending\"\n        case REQ_STATUS.SUCCESS:\n            return \"req-success\"\n        case REQ_STATUS.FAIL:\n            return \"req-fail\"\n    }\n    return \"\"\n}\n\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function timestampToShortString(t) {\n    let date = new Date(t);\n    let day = date.getDate();\n\n    let monthIndex = date.getMonth();\n    let monthName = monthNames[monthIndex];\n\n    let year = date.getFullYear();\n\n    return `${day} ${monthName} ${year}`;\n}\n","/home/ec2-user/copoetry/front-end/src/components/PoemPage/PoemPage.js",["98","99","100","101"],"import React, {useState, useEffect, useProps} from \"react\"\n\nimport {useAuth0} from \"../../react-auth0-spa\";\nimport {useParams, Redirect} from \"react-router-dom\"\nimport Poem from \"../Poem/Poem\"\nimport PoemInput from \"../WritePage/PoemInput\";\nimport {REQ_STATUS} from \"../../utils\";\n\n/*\n * Poem request body will be something like :\n * {\n    \"id\":\"20f8707d6000108\",\n    \"title\":\"MyPoem\",\n    \"dateCreated\":\"2021-01-15T00:00:00+01:00\",\n    \"lines\":[\n      {\n         \"line_id\":\"8010006d7078f02\",\n         \"date_created\":\"2021-01-14T00:00:00+01:00\",\n         \"creator\":\"mikhail\",\n         \"content\":\"Two roads diverged in yellow wood\",\n         \"poem_id\":\"20f8707d6000108\"\n      }\n    ]\n    }\n */\nconst ALL_POEMS_GONE_MSG = \"All poems are gone. High time to start a new one!\"\nconst NO_POEM_HERE_MSG = \"No poem over here...\"\nfunction PoemPage({random, editable, addingPoem, setParentError, refresh}) {\n    const {\n        getTokenSilently,\n        user,\n        isAuthenticated,\n    } = useAuth0();\n\n    const {poemid} = useParams();\n    const [poem, setPoem] = useState()\n    const [loadPoemStatus, setLoadPoemStatus] = useState(REQ_STATUS.NOT_STARTED);\n    // status of uploading a new line. See utils.js for possible values.\n    const [sendLineStatus, setSendLineStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const noPoemsMsg = random ? ALL_POEMS_GONE_MSG : NO_POEM_HERE_MSG;\n\n    useEffect(() => {\n        const getPoem = async () => {\n            if (!random && !poemid) {\n                setParentError(noPoemsMsg)\n                return\n            }\n\n            try {\n                setLoadPoemStatus(REQ_STATUS.LOADING)\n                const token = await getTokenSilently();\n                // Send a GET request to the server and add the signed in user's\n                // access token in the Authorization header\n                const response = await fetch(\"/copoetry/api/get/poem/\" + (random ? \"random/\" + user.nickname : poemid), {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                });\n\n                const responseData = await response.json();\n                if (response.ok) {\n                    setLoadPoemStatus(REQ_STATUS.SUCCESS)\n                    // To-Do: Check more thoroughly whether response is valid and log better errors.\n                    setPoem(responseData);\n                } else {\n                    setLoadPoemStatus(REQ_STATUS.FAIL)\n                    setParentError(noPoemsMsg)\n                    console.error(responseData)\n                }\n            } catch (error) {\n                setLoadPoemStatus(REQ_STATUS.FAIL)\n                setParentError(noPoemsMsg);\n                console.error(error)\n            }\n        };\n        setLoadPoemStatus(REQ_STATUS.NOT_STARTED)\n        setSendLineStatus(REQ_STATUS.NOT_STARTED)\n        getPoem();\n    }, [refresh]);\n\n    const submitLine = async (poemId, content) => {\n        if (!poemId) {\n            setParentError(\"Can't submit poem... Try reloading.\")\n            return\n        } else if (poemId.length == 0 || !content || !content.length || content.length == 0)\n            setParentError(\"Someone screwed up data pipeline between components... Try reloading.\")\n\n        try {\n            setSendLineStatus(REQ_STATUS.LOADING)\n            const token = await getTokenSilently();\n            const response = await fetch(\"/copoetry/api/add/line\", {\n                method: \"post\",\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({poemId, content, creator: user.nickname || user.givenName})\n            });\n\n            const responseData = await response.json();\n            if (response.ok) {\n                setSendLineStatus(REQ_STATUS.SUCCESS)\n            } else {\n                setSendLineStatus(REQ_STATUS.FAIL)\n                setParentError(\"Couldn't upload the line... See console for error.\")\n                console.error(responseData)\n            }\n        } catch (error) {\n            setParentError(\"Couldn't get this poem... See console for error.\");\n            console.error(error)\n        }\n    };\n\n\n    const [sendPoemStatus, setSendPoemStatus] = useState(REQ_STATUS.NOT_STARTED)\n    const submitPoem = async (title) => {\n        if (!title || !title.length || title.length < 1)\n            setParentError(\"Come on, you can do better.\")\n\n        try {\n            setSendPoemStatus(REQ_STATUS.LOADING)\n            const token = await getTokenSilently();\n            const response = await fetch(\"/copoetry/api/add/poem\", {\n                method: \"post\",\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({title, creator: user.nickname || user.givenName})\n            });\n\n            const responseData = await response.json();\n            if (response.ok) {\n                setSendPoemStatus(REQ_STATUS.SUCCESS)\n\n            } else {\n                setSendPoemStatus(REQ_STATUS.FAIL)\n                setParentError(\"Couldn't upload the line... See console for error.\")\n                console.error(responseData)\n            }\n        } catch (error) {\n            setParentError(\"Couldn't get this poem... See console for error.\");\n            console.error(error)\n        }\n    };\n\n    if (!isAuthenticated)\n        return <Redirect to='/welcome'/>\n\n    return <div className=\"poem-page\">\n        {addingPoem ? <PoemInput onSubmit={submitPoem} submitStatus={sendPoemStatus}/>\n            : <Poem loading={loadPoemStatus} poem={poem} editable={editable} onSubmit={editable ? submitLine : null}\n                    loadPoemStatus={loadPoemStatus} sendLineStatus={sendLineStatus}/>}\n    </div>;\n}\n\nexport default PoemPage\n","/home/ec2-user/copoetry/front-end/src/components/ReadPage/PoemPreview.js",["102","103","104"],"import React, {useState} from \"react\"\nimport \"./read-page.css\"\nimport {REQ_STATUS, timestampToShortString} from \"../../utils\";\n\nimport Tilt from 'react-parallax-tilt';\nimport {useAuth0} from \"../../react-auth0-spa\";\nimport {Link} from \"react-router-dom\";\n\nconst PREVIEW_LINES_NUM = 12;\nconst MAX_TILT_ANGLE = 8;\n\nfunction PoemPreview({poem, linkPrefix}) {\n    const {user} = useAuth0();\n    // To-Do: Add parallax hover effect + text shadow.\n    if (!linkPrefix) linkPrefix = '';\n    return <Link to={linkPrefix + '/' + poem.id}>\n        <Tilt tiltReverse={true} tiltMaxAngleX={MAX_TILT_ANGLE} tiltMaxAngleY={MAX_TILT_ANGLE} className=\"poem-preview\">\n            <h3>{poem.title}</h3>\n            <div className=\"poem-preview-content\">\n                <p>\n                    {poem.lines && poem.lines.slice(0, PREVIEW_LINES_NUM).map((line, idx) =>\n                        <li className={\"poem-preview-line\" + (line.creator === user.nickname ? ' personal' : '')} key={\"my-preview-\" + idx}\n                            style={{\n                                opacity: 1 - (idx + 1) / PREVIEW_LINES_NUM\n                            }}>\n                            {line.content}\n                        </li>)}\n                </p>\n            </div>\n            <div className=\"poem-preview-footer small-boxy\">\n                <span className=\"poem-preview-date\">{timestampToShortString(poem.dateCreated)}</span>\n                <span className=\"poem-preview-creator\">started by {poem.creator == user.nickname ?\n                    <span className='personal'>you</span> : poem.creator}</span>\n            </div>\n        </Tilt>\n    </Link>\n}\n\nexport default PoemPreview\n","/home/ec2-user/copoetry/front-end/src/components/Poem/Poem.js",["105","106"],"import React, {useEffect, useState} from \"react\"\nimport {useAuth0} from \"../../react-auth0-spa\"\nimport Skeleton from 'react-loading-skeleton'\nimport \"./Poem.css\"\nimport Line from \"./Line\"\nimport {REQ_STATUS, getRequestStatusClass} from \"../../utils\";\n\nconst MIN_SKEL_LENGTH = 200\nconst MAX_SKEL_LENGTH = 400\nconst SKEL_LINE_NUM = 7\n\nfunction randInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min)\n}\n\n/*\n * poem - Poem Object (see PoemPage for format).\n * editable - boolean whether edit UI should be rendered.\n * loading - boolean whether skeleton should be showed.\n * onSubmit - callback with paramters (poemId, content) called when user presses Enter.\n */\nfunction Poem({poem, editable, loading, onSubmit, loadPoemStatus, sendLineStatus}) {\n    const {user} = useAuth0();\n    const [linesPlaceholder, setLinesPlaceholder] = useState([]);\n    const [newLineContent, setNewLine] = useState(\"\");\n    const [showNewFakeLine, setShowNewFakeLine] = useState(false);\n\n    useEffect(() => {\n        // Create lines placeholder once\n        let linesSkeleton = [];\n        for (let i = 0; i < SKEL_LINE_NUM; i++)\n            linesSkeleton.push(<Skeleton key={'lines-pholder-' + i} width={randInt(MIN_SKEL_LENGTH, MAX_SKEL_LENGTH)}/>)\n        setLinesPlaceholder(linesSkeleton)\n    }, []);\n\n    function handleNewLineInput(event) {\n        setNewLine(event.target.value)\n    }\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            onSubmit(poem.id, event.target.value)\n        }\n    }\n\n    function constructLine(content) {\n        return {\n            creator: user.nickname,\n            content: content\n        }\n    }\n\n    console.log(sendLineStatus)\n    if (sendLineStatus == REQ_STATUS.SUCCESS) {\n        setTimeout(() => setShowNewFakeLine(true), 700)\n    } else if (showNewFakeLine) {\n        // To-Do: Better way to reset state.\n        setNewLine(\"\")\n        setShowNewFakeLine(false)\n    }\n\n\n    if (!poem)\n        return <div className=\"poem\"></div>\n\n    return <div className={\"poem \" + (editable ? \"poem-editable\" : \"\")}>\n        <div className=\"poem-title-con\">\n            <h3 className=\"poem-title\">{poem.title}</h3>\n            <span className=\"small-boxy poem-title-creator\">\n                started by {poem.creator == user.nickname ?\n                <span className='personal'>you</span> : poem.creator}\n            </span>\n        </div>\n        {loadPoemStatus === REQ_STATUS.LOADING ? linesPlaceholder :\n            poem.lines && poem.lines.map((line, index) =>\n                <Line key={index} line={line} authored={line.creator === user.nickname}/>\n            )\n        }\n        {editable && (!showNewFakeLine ?\n                <input required={true} maxLength={42}\n                       className={\"line line-input \" + getRequestStatusClass(sendLineStatus)}\n                       value={newLineContent} onChange={handleNewLineInput}\n                       type=\"text\" onKeyDown={handleKeyDown} autoFocus={true} placeholder=\"Go off...\"/>\n                : <Line line={constructLine(newLineContent)} authored={true}/>\n        )}\n    </div>\n}\n\nexport default Poem\n","/home/ec2-user/copoetry/front-end/src/components/WritePage/PoemInput.js",[],"/home/ec2-user/copoetry/front-end/src/components/Poem/Line.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":4,"column":9,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"117","line":5,"column":9,"nodeType":"115","messageId":"116","endLine":5,"endColumn":12},{"ruleId":"113","severity":1,"message":"118","line":5,"column":14,"nodeType":"115","messageId":"116","endLine":5,"endColumn":20},{"ruleId":"113","severity":1,"message":"119","line":4,"column":9,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"120","line":5,"column":9,"nodeType":"115","messageId":"116","endLine":5,"endColumn":17},{"ruleId":"113","severity":1,"message":"121","line":5,"column":9,"nodeType":"115","messageId":"116","endLine":5,"endColumn":13},{"ruleId":"113","severity":1,"message":"122","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":12},{"ruleId":"123","severity":1,"message":"124","line":57,"column":20,"nodeType":"125","messageId":"126","endLine":57,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":61,"column":24,"nodeType":"125","messageId":"126","endLine":61,"endColumn":26},{"ruleId":"113","severity":1,"message":"127","line":4,"column":9,"nodeType":"115","messageId":"116","endLine":4,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":12,"column":5,"nodeType":"130","messageId":"131","endLine":21,"endColumn":6},{"ruleId":"113","severity":1,"message":"132","line":1,"column":37,"nodeType":"115","messageId":"116","endLine":1,"endColumn":45},{"ruleId":"133","severity":1,"message":"134","line":79,"column":8,"nodeType":"135","endLine":79,"endColumn":17,"suggestions":"136"},{"ruleId":"123","severity":1,"message":"124","line":85,"column":34,"nodeType":"125","messageId":"126","endLine":85,"endColumn":36},{"ruleId":"123","severity":1,"message":"124","line":85,"column":88,"nodeType":"125","messageId":"126","endLine":85,"endColumn":90},{"ruleId":"113","severity":1,"message":"137","line":1,"column":16,"nodeType":"115","messageId":"116","endLine":1,"endColumn":24},{"ruleId":"113","severity":1,"message":"119","line":3,"column":9,"nodeType":"115","messageId":"116","endLine":3,"endColumn":19},{"ruleId":"123","severity":1,"message":"124","line":32,"column":81,"nodeType":"125","messageId":"126","endLine":32,"endColumn":83},{"ruleId":"123","severity":1,"message":"124","line":54,"column":24,"nodeType":"125","messageId":"126","endLine":54,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":70,"column":42,"nodeType":"125","messageId":"126","endLine":70,"endColumn":44},{"ruleId":"109","replacedBy":"138"},{"ruleId":"111","replacedBy":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useLoading' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'styled' is defined but never used.","'REQ_STATUS' is defined but never used.","'useAuth0' is defined but never used.","'Link' is defined but never used.","'Poem' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTokenSilently', 'noPoemsMsg', 'poemid', 'random', 'setParentError', and 'user.nickname'. Either include them or remove the dependency array. If 'setParentError' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["142"],"'useState' is defined but never used.",["140"],["141"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},"Update the dependencies array to be: [getTokenSilently, noPoemsMsg, poemid, random, refresh, setParentError, user.nickname]",{"range":"145","text":"146"},[2883,2892],"[getTokenSilently, noPoemsMsg, poemid, random, refresh, setParentError, user.nickname]"]