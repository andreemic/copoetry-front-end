[{"/home/mikhailandreev/Documents/code_go/poems/front-end/src/index.js":"1","/home/mikhailandreev/Documents/code_go/poems/front-end/src/App.js":"2","/home/mikhailandreev/Documents/code_go/poems/front-end/src/history.js":"3","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/react-auth0-spa.js":"4","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/anonymous.js":"5","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PrivateRoute.js":"6","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WelcomePage/WelcomePage.js":"7","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Header/Header.js":"8","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Background/Background.js":"9","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemPage/PoemPage.js":"10","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/MyPoemsPage.js":"11","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/ReadAllPoemsPage.js":"12","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WritePage/WritePage.js":"13","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/api.js":"14","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/utils.js":"15","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/PoemsOverview.js":"16","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/ui-msg.js":"17","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WritePage/PoemInput.js":"18","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Poem/Poem.js":"19","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/PoemPreview.js":"20","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Poem/Line.js":"21","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/canAddLineToPoem.js":"22"},{"size":1385,"mtime":1613420519459,"results":"23","hashOfConfig":"24"},{"size":2626,"mtime":1613425412833,"results":"25","hashOfConfig":"24"},{"size":87,"mtime":1610795062490,"results":"26","hashOfConfig":"24"},{"size":3178,"mtime":1613078765804,"results":"27","hashOfConfig":"24"},{"size":1242,"mtime":1613156561925,"results":"28","hashOfConfig":"24"},{"size":972,"mtime":1611083955108,"results":"29","hashOfConfig":"24"},{"size":1180,"mtime":1612648665173,"results":"30","hashOfConfig":"24"},{"size":1537,"mtime":1613384559563,"results":"31","hashOfConfig":"24"},{"size":424,"mtime":1610799227720,"results":"32","hashOfConfig":"24"},{"size":1202,"mtime":1612909720885,"results":"33","hashOfConfig":"24"},{"size":240,"mtime":1611476075896,"results":"34","hashOfConfig":"24"},{"size":268,"mtime":1611250433644,"results":"35","hashOfConfig":"24"},{"size":3867,"mtime":1613422995611,"results":"36","hashOfConfig":"24"},{"size":4253,"mtime":1613249503829,"results":"37","hashOfConfig":"24"},{"size":2056,"mtime":1613252861469,"results":"38","hashOfConfig":"24"},{"size":3051,"mtime":1612909720906,"results":"39","hashOfConfig":"24"},{"size":1131,"mtime":1612640523242,"results":"40","hashOfConfig":"24"},{"size":1718,"mtime":1612909720857,"results":"41","hashOfConfig":"24"},{"size":8434,"mtime":1613423287305,"results":"42","hashOfConfig":"24"},{"size":2342,"mtime":1612996675856,"results":"43","hashOfConfig":"24"},{"size":490,"mtime":1613164610573,"results":"44","hashOfConfig":"24"},{"size":264,"mtime":1612995173590,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"zmsom6",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mikhailandreev/Documents/code_go/poems/front-end/src/index.js",[],["101","102"],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/App.js",["103","104"],"import './App.css';\nimport {BrowserRouter, Route, Switch, Redirect} from \"react-router-dom\";\nimport {useAuth0} from \"./helpers/react-auth0-spa\";\nimport {ThreeDots} from '@agney/react-loading';\nimport {Slide, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Header from './components/Header/Header'\nimport WritePage from './components/WritePage/WritePage'\nimport ReadAllPoemsPage from './components/PoemsOverview/ReadAllPoemsPage'\nimport MyPoemsPage from \"./components/PoemsOverview/MyPoemsPage\";\nimport PoemPage from \"./components/PoemPage/PoemPage\";\nimport WelcomePage from \"./components/WelcomePage/WelcomePage\"\nimport Background from \"./components/Background/Background\";\nimport {Context} from \"./helpers/anonymous\"\nimport Feedback from \"feeder-react-feedback\"; // import Feedback component\nimport \"feeder-react-feedback/dist/feeder-react-feedback.css\"; // import stylesheet\n\nimport React, {useContext} from \"react\";\n\nfunction App() {\n    const {isAuthenticated} = useAuth0();\n    const {loading} = useAuth0();\n    const [state] = useContext(Context);\n\n    return <div className={\"app-con \" + (state.anonymous ? \"darkmode\" : \"\")}>\n        <Feedback projectId=\"602adc27a8a0030004764598\" primaryColor={\"#fdc6db\"} hoverBorderColor={\"#bde0feff\"} zIndex={\"51\"} />\n        <Background/>\n        {loading ? <ThreeDots className=\"big-loader\" width=\"100\"/> :\n            <div className=\"app-wrapper\">\n                <BrowserRouter>\n                    {isAuthenticated && <Header/>}\n\n                    <Switch>\n                        <Route path='/welcome' component={WelcomePage}/>\n                        <PrivateRoute path='/write' component={WritePage}/>\n\n                        {/*<PrivateRoute path='/read/:poemid' component={PoemPage}/>\n                        <PrivateRoute path='/read' component={ReadAllPoemsPage}/>*/}\n\n                        <PrivateRoute path='/my_poems/:poemid' component={PoemPage}/>\n                        <PrivateRoute path='/my_poems' component={MyPoemsPage}/>\n                        <Route component={isAuthenticated ? WritePage : WelcomePage}/>\n                    </Switch>\n                </BrowserRouter>\n            </div>\n        }\n        <ToastContainer\n            position=\"bottom-right\"\n            autoClose={5000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n            transition={Slide}\n        />\n    </div>;\n}\n\nexport default App;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/history.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/react-auth0-spa.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/anonymous.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PrivateRoute.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WelcomePage/WelcomePage.js",["105"],"import React, {useState} from \"react\"\nimport {useAuth0} from \"../../helpers/react-auth0-spa\";\nimport {Redirect} from \"react-router-dom\"\nimport {Button} from \"react-materialize\";\nimport ParticleEffectButton from 'react-particle-effect-button'\n\nimport './welcome.css'\n\nconst PARTICLE_DURATION = 700;\nfunction WelcomePage() {\n    const {isAuthenticated, loginWithRedirect} = useAuth0();\n    let [loginClicked, setLoginClicked] = useState();\n\n    function loginClick() {\n        setLoginClicked(true);\n        setTimeout(loginWithRedirect, PARTICLE_DURATION * 0.5)\n    }\n\n    if (isAuthenticated)\n        return <Redirect to='/write'/>\n    return <div className=\"welcome-con\">\n        <h2>\"None of us is as smart as all of us.\" <span>—&nbsp;&nbsp;&nbsp;Ken Blanchard</span></h2>\n        <p>You add a line, she adds a line... See what you can create.</p>\n        <ParticleEffectButton color='#A2D2FF' hidden={loginClicked}\n        duration={PARTICLE_DURATION} direction=\"top\" className=\"welcome-login-btn-con\">\n            <button className=\"welcome-login-btn\" onClick={loginClick}>LOG IN VIA AUTH0</button>\n        </ParticleEffectButton>\n    </div>;\n}\n\nexport default WelcomePage;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Header/Header.js",["106","107"],"import React, {useContext, useEffect, useState} from \"react\"\nimport {useAuth0} from \"../../helpers/react-auth0-spa\";\nimport 'materialize-css';\nimport './header.css';\nimport {NavLink} from \"react-router-dom\";\nimport {useApi} from \"../../helpers/api\";\nimport {Context} from \"../../helpers/anonymous\";\n\nfunction Header() {\n    const {isAuthenticated, logout, user} = useAuth0();\n    const {updateNeedsToVote} = useApi();\n    const [state, dispatch] = useContext(Context);\n\n\n    useEffect(updateNeedsToVote, [user]);\n\n    return <section className=\"header\">\n        <span className=\"header-links\">\n            {/*{<NavLink to=\"/read\" activeClassName=\"selected\">read</NavLink>}*/}\n            {isAuthenticated && <NavLink to=\"/write\" activeClassName=\"selected\">write</NavLink>}\n            {isAuthenticated && <NavLink to=\"/my_poems\" activeClassName=\"selected\" className={state.needsToVote ? \"notif\" : \"\"}>my poems</NavLink>}\n        </span>\n\n        {isAuthenticated && <span className=\"header-user-area\">\n            <span className={\"anonymous-toggler \" + (state.anonymous\n                ? \"anonymous\" : \"\")} onClick={() => dispatch({type: 'TOGGLE_ANONYMOUS'})}/>\n            <span className=\"header-logout-label\">Not <span className=\"username\">{user.nickname}</span>?</span>\n            <span className=\"small-boxy small-boxy-btn header-logout-btn\" onClick={logout}>Log Out</span>\n            <span className=\"header-logout-mobile material-icons\" onClick={logout}>logout</span>\n        </span>}\n\n    </section>\n}\n\nexport default Header;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Background/Background.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemPage/PoemPage.js",["108"],"import React, {useEffect, useState} from \"react\"\nimport {REQ_STATUS} from \"../../helpers/utils\";\nimport {useParams} from \"react-router-dom\";\nimport {useApi} from \"../../helpers/api\";\nimport Poem from \"../Poem/Poem\";\n\nfunction PoemPage() {\n    const [error, setError] = useState(\"\")\n    const [poem, setPoem] = useState()\n    const api = useApi();\n    const [loadPoemStatus, setLoadPoemStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const {poemid} = useParams();\n    const getPoem = () => {\n        setLoadPoemStatus(REQ_STATUS.LOADING);\n        api.getPoemByID(poemid).then(response => {\n            if (response.status === \"success\") {\n                setLoadPoemStatus(REQ_STATUS.SUCCESS);\n                setPoem(response.data);\n            } else {\n                setLoadPoemStatus(REQ_STATUS.FAIL);\n                setPoem(null);\n                setError(response.message);\n            }\n        }).catch(err => {\n            setError(\"Can't load this poem.\")\n        });\n    }\n    useEffect(getPoem, []);\n    return !error ? <Poem poem={poem} setPoem={setPoem} showSkeleton={loadPoemStatus === REQ_STATUS.LOADING}/> :\n        <span className=\"error\">{error}</span>;\n}\n\nexport default PoemPage;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/MyPoemsPage.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/ReadAllPoemsPage.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WritePage/WritePage.js",["109","110"],"import React, {useEffect, useState} from \"react\";\nimport \"./writePage.css\"\nimport {REQ_STATUS} from \"../../helpers/utils\";\nimport {useApi} from \"../../helpers/api\";\nimport Poem from \"../Poem/Poem\";\nimport PoemInput from \"./PoemInput\";\nimport {getErrorMessage, POEM_SEND_ERR, showError, showInfo, showSuccess} from \"../../helpers/ui-msg\";\nimport {useMediaQuery} from \"react-responsive\";\nimport {Link} from \"react-router-dom\";\n\nfunction WritePage() {\n    const [error, setError] = useState(\"\")\n\n    const {getRandomPoem, submitPoem} = useApi();\n    const [poem, setPoem] = useState()\n    const [loadPoemStatus, setLoadPoemStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const [addingPoem, setAddingPoem] = useState(false);\n    const [submitPoemStatus, setSubmitPoemStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const isMobile = useMediaQuery({query: '(max-width: 480px)'})\n\n    const getNewPoem = () => {\n        setLoadPoemStatus(REQ_STATUS.LOADING);\n        getRandomPoem().then(response => {\n            if (response.status === \"success\") {\n                setLoadPoemStatus(REQ_STATUS.SUCCESS);\n                setPoem(response.data);\n            } else if (response.status === \"error\" && response.httpStatus === 404) {\n                // No editable poems.\n                setLoadPoemStatus(REQ_STATUS.FAIL);\n                setPoem(null);\n            } else {\n                // Request gone wrong.\n                setLoadPoemStatus(REQ_STATUS.FAIL);\n                setError(response.message);\n            }\n        }).catch(err => {\n            setError(\"Can't load this poem.\")\n        });\n    }\n    useEffect(getNewPoem, []);\n\n\n    const onSubmitPoem = (title, firstLine) => {\n        if (!title || !firstLine || firstLine.length === 0 || title.length === 0) return;\n        setSubmitPoemStatus(REQ_STATUS.LOADING)\n        submitPoem(title, firstLine).then(response => {\n            if (response.status === \"success\") {\n                // Updated Poem is inside response.data.\n                setSubmitPoemStatus(REQ_STATUS.SUCCESS);\n                setTimeout(() => setSubmitPoemStatus(REQ_STATUS.NOT_STARTED), 700)\n                setPoem(response.data);\n                setAddingPoem(false);\n                showSuccess(\"Poem created.\");\n                getNewPoem()\n            } else {\n                setError(response.message);\n                setSubmitPoemStatus(REQ_STATUS.FAIL);\n                showError(getErrorMessage(POEM_SEND_ERR));\n            }\n        }).catch(() => setError(\"Couldn't submit this poem. Try reloading the page.\"));\n    };\n\n    return <div className={\"write-page\"}>\n        <p className=\"page-desc\">\n            {error === \"\" ?\n                (addingPoem ? <span>Do your thing.</span> :\n                    (poem == null ? <span>No poems going around at the moment... Start your own!</span> :\n                        (isMobile ? <span>Here's a poem someone started. Add a line and watch it grow under\n                             <Link to=\"/my_poems\"> my poems</Link> or start your own.</span> : <span>Here's a poem someone started.\n            You get one shot to add a line. If you choose to skip, the poem flies away to someone else.\n                But if you don't, you can watch it grow under <i>my poems</i>.</span>)))\n                : <span>{error}</span>\n            }\n        </p>\n        <div className={\"write-page-btn-con\" + (addingPoem ? ' hidden' : '')}>\n            <button onClick={() => setAddingPoem(true)}>Add Poem</button>\n            {poem == null ? null : <button onClick={getNewPoem}>Skip Poem</button>}\n        </div>\n        {addingPoem ? <PoemInput onSubmit={onSubmitPoem} submitStatus={submitPoemStatus}/>\n            : (poem != null ?\n                <Poem poem={poem} setPoem={setPoem} showSkeleton={loadPoemStatus === REQ_STATUS.LOADING}/> : null)}\n    </div>;\n}\n\nexport default WritePage;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/api.js",["111","112","113","114","115","116","117","118","119"],"import {useAuth0} from \"./react-auth0-spa\";\nimport {useCallback, useContext, useEffect, useRef, useState} from \"react\";\nimport {Context} from \"./anonymous\";\n\nconst defaultResponse = {\n    status: \"error\",\n    message: \"Trouble communicating with our servers.\"\n}\n\nfunction useApi(anonymous) {\n    // Function for getting the Access Token\n    const {getTokenSilently, user} = useAuth0()\n    const [registered, setRegistered] = useState();\n    const [state, dispatch] = useContext(Context);\n\n    // If any of these requests return null, communication with the server was unsuccessful.\n    // (invalid auth token, blabla)\n    // To-Do: Pass statuses down to the caller to reflect particular statuses in UI.\n    const makeRequest = async (path, method = 'GET', body = undefined, addAnonymous = false) => {\n        let token = await getTokenSilently();\n        try {\n            let params = {\n                method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                }\n            };\n            if (method === 'POST') {\n                if (addAnonymous) body = {...body, anonymous: state.anonymous};\n                params['body'] = JSON.stringify(body);\n            }\n            const response = await fetch(path, params);\n            let responseBody = await response.json();\n            if (responseBody.status === undefined) return defaultResponse; // Auth errors result in a string.\n\n            return responseBody;\n        } catch (e) {\n            return defaultResponse;\n        }\n    }\n\n\n    const getPoemByID = useCallback(async (poemId) =>\n            makeRequest(\"/api/get/poem/\" + poemId)\n        , [])\n\n    const submitLine = async (poemId, content, beginCompletionVote) =>\n        makeRequest('/api/add/line', 'POST', {poemId, content, beginCompletionVote}, true)\n\n\n    const getRandomPoem = useCallback(async () =>\n            makeRequest('/api/get/random-poem')\n        , [])\n\n    const submitPoem = async (title, firstLine) => {\n        if (!title || !title.length || title.length === 0) throw new Error(\"Trying to send titleless Poem.\");\n        return makeRequest('/api/add/poem', 'POST', {title, firstLine}, true);\n    };\n\n    const getNeedsToVote = useCallback(async () =>\n            makeRequest('/api/user/needs-to-vote')\n        , [])\n\n    const getUserPoems = useCallback(async (limit, offset) =>\n            makeRequest(`/api/get/my-poems?limit=${limit}&offset=${offset}`)\n        , [])\n\n    const getPoems = useCallback(async (limit, offset) =>\n            makeRequest(`/api/get/poems/all?limit=${limit}&offset=${offset}`)\n        , [])\n\n    const register = useCallback(async () =>\n        user !== undefined && makeRequest(\"/api/user/register\", 'POST', {nickname: user.nickname})\n        , []);\n    const castCompletionVote = useCallback(async (votingId, forCompletingPoem) =>\n            makeRequest(\"/api/poem/completion-vote\", 'POST', {forCompletingPoem, votingId})\n        , [])\n    const updateNeedsToVote = () => {\n        getNeedsToVote().then(result => {\n            let needsToVote = false\n            if (result.status === \"success\") {\n                needsToVote = result.data;\n            }\n            dispatch({type: \"SET_NEEDS_TO_VOTE\", payload: needsToVote});\n        }).catch(console.error);\n    }\n\n    // Register with API asap.\n    useEffect(() => {\n        console.log(registered)\n        if (registered) return;\n        register().then(resp => {\n            if (resp.status === \"success\") {\n                setRegistered(true);\n            }\n        });\n    }, [user]);\n\n    return {\n        getPoemByID,\n        getPoems,\n        getRandomPoem,\n        getUserPoems,\n        submitLine,\n        submitPoem,\n        updateNeedsToVote,\n        castCompletionVote\n    };\n}\n\nexport {useApi};\n/*\n * Poem request body will be something like :\n * {\n    \"id\":\"20f8707d6000108\",\n    \"title\":\"MyPoem\",\n    \"dateCreated\":\"2021-01-15T00:00:00+01:00\",\n    \"lines\":[\n      {\n         \"line_id\":\"8010006d7078f02\",\n         \"date_created\":\"2021-01-14T00:00:00+01:00\",\n         \"creator\":\"mikhail\",\n         \"content\":\"Two roads diverged in yellow wood\",\n         \"poem_id\":\"20f8707d6000108\"\n      }\n    ]\n    }\n */\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/utils.js",["120"],"export const REQ_STATUS = {\n    NOT_STARTED: 0,\n    LOADING: 1,\n    SUCCESS: 2,\n    FAIL: 3\n};\n/*\n * Returns CSS class name corresponidng to request status.\n * Used all across the App with according CSS classes.\n */\nexport function getRequestStatusClass(status) {\n    switch(status) {\n        case REQ_STATUS.NOT_STARTED:\n            return \"req-not-started\"\n        case REQ_STATUS.LOADING:\n            return \"req-pending\"\n        case REQ_STATUS.SUCCESS:\n            return \"req-success\"\n        case REQ_STATUS.FAIL:\n            return \"req-fail\"\n    }\n    return \"\"\n}\n\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function timestampToShortString(t, withOn=false) {\n    let date = new Date(t);\n    let day = date.getDate();\n\n    let monthIndex = date.getMonth();\n    let monthName = monthNames[monthIndex];\n\n    let year = date.getFullYear();\n    let now = new Date();\n    if (year === now.getFullYear() && monthIndex === now.getMonth() && day === now.getDate())\n        return `today`\n    if (year === now.getFullYear() && monthIndex === now.getMonth() && day === now.getDate()-1)\n        return `yesterday`\n    else if (year === now.getFullYear())\n        return `${withOn ? \"on \" : \"\"}${day} ${monthName}`;\n    else\n        return `${withOn ? \"on \" : \"\"}${day} ${monthName} ${year}`;\n}\n\nexport function getActiveVotingFromPoem(poem) {\n    if (!poem || !Array.isArray(poem.completionVotings)) return null;\n    let filteredVotings = poem.completionVotings.filter(v => v.state === \"active\")\n    if (filteredVotings.length < 1) return null;\n    return filteredVotings[0] // More than one at a time not expected\n}\n\nexport function getPoemDateCompleted(poem) {\n    if (!poem || !Array.isArray(poem.completionVotings) || poem.completionVotings.length < 1) return null;\n    let filteredVotings = poem.completionVotings.filter(v => v.state === \"stopped\");\n    if (filteredVotings.length < 1) return null;\n    return filteredVotings[0].dateEnded // More than one at a time not expected\n}\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/PoemsOverview.js",["121","122","123"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport {REQ_STATUS} from \"../../helpers/utils\";\nimport PoemPreview from \"./PoemPreview\";\nimport Skeleton from \"react-loading-skeleton\";\n\n\nconst getPoemSkeletons = (n) =>\n    Array.from({length: n}, (x, idx) => <Skeleton key={\"poem-skeleton-\" + idx} height={n}/>)\n\nconst POEMS_PER_PAGE = 3;\n// getPoemsFunction is one of the functions from \"/helpers/api.js\".\n//      This pattern is used to generalize \"my_poems\" and \"read\" page to this one.\nfunction PoemsOverview({getPoemsFunction, poemsPerPage = 7}) {\n    const [poems, setPoems] = useState(null)\n    const [error, setError] = useState(\"\");\n    const [loadPoemsStatus, setLoadPoemsStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const [poemSkeletons, setPoemSkeletons] = useState([])\n\n    // implement infinite scrolling with intersection observer\n    let bottomBoundaryRef = useRef(null);\n    const scrollObserver = useCallback(\n        node => {\n            // new IntersectionObserver(entries => {\n            //     entries.forEach(en => {\n            //         if (en.intersectionRatio > 0) {\n            //             // Get more poems.\n            //             setLoadPoemsStatus(REQ_STATUS.LOADING);\n            //             getPoemsFunction(POEMS_PER_PAGE, poems.length).then(newPoems => {\n            //                 setPoems(poems.concat(newPoems))\n            //                 setLoadPoemsStatus(REQ_STATUS.SUCCESS)\n            //             }).catch(err => setLoadPoemsStatus(REQ_STATUS.FAIL))\n            //         }\n            //     });\n            // }).observe(node);\n        },\n        [setPoems]\n    );\n    // useEffect(() => {\n    //     if (bottomBoundaryRef.current) {\n    //         scrollObserver(bottomBoundaryRef.current);\n    //     }\n    // }, [scrollObserver, bottomBoundaryRef]);\n\n    const getPoemsInit = () => {\n        setLoadPoemsStatus(REQ_STATUS.LOADING)\n        getPoemsFunction(POEMS_PER_PAGE, 0).then(response => {\n            if (response.status === \"success\") {\n                setLoadPoemsStatus(REQ_STATUS.SUCCESS);\n                setPoems(response.data);\n            } else {\n                setLoadPoemsStatus(REQ_STATUS.FAIL);\n                setError(response.message)\n            }\n        }).catch(e => {\n            console.error(e);\n            setError(\"Can't get poems right now.\")\n        });\n    }\n\n    useEffect(() => {\n        getPoemsInit();\n        setPoemSkeletons(getPoemSkeletons(POEMS_PER_PAGE));\n    }, []);\n\n    return <div className=\"poems-overview\">\n        {(loadPoemsStatus <= REQ_STATUS.LOADING) ? poemSkeletons :\n            error === \"\" && poems != null\n            ? (poems.length > 0 ? poems.map((poem, idx) => <PoemPreview poem={poem} linkPrefix={\"my_poems\"}\n            key={\"poem-preview-\" + idx}/>)\n            : <span>No poems here... You should go write some!</span>)\n            : <span className=\"error\">{error}</span>}\n\n        <div id='page-bottom-boundary' ref={bottomBoundaryRef}/>\n    </div>\n}\n\nexport default PoemsOverview;\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/ui-msg.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/WritePage/PoemInput.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Poem/Poem.js",["124","125"],"import React, {useEffect, useState} from \"react\"\nimport {useAuth0} from \"../../helpers/react-auth0-spa\"\nimport Skeleton from 'react-loading-skeleton'\nimport \"./Poem.css\"\nimport Line from \"./Line\"\nimport {\n    REQ_STATUS,\n    getRequestStatusClass,\n    getActiveVotingFromPoem,\n    timestampToShortString,\n    getPoemDateCompleted\n} from \"../../helpers/utils\";\nimport {useApi} from \"../../helpers/api\";\nimport {getErrorMessage, LINE_SEND_ERR, showError, showInfo, showSuccess} from \"../../helpers/ui-msg\";\nimport canAddLineToPoem from \"../../helpers/canAddLineToPoem\";\nimport {useMediaQuery} from 'react-responsive'\n\nconst MIN_SKEL_LENGTH = 200\nconst MAX_SKEL_LENGTH = 400\nconst SKEL_LINE_NUM = 7\n\nfunction randInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min)\n}\n\nfunction onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n}\n\n/*\n * initPoem - Poem Object (see PoemPage for format).\n * showSkeleton - whether to display loading skeleton UI.\n */\nfunction Poem({poem, setPoem, showSkeleton}) {\n    const {user} = useAuth0();\n    const [linesSkeleton, setLinesSkeleton] = useState([]);\n    const [newLineInput, setNewLineInput] = useState(\"\");\n    const isMobile = useMediaQuery({query: '(max-width: 480px)'})\n    const [completePoemInput, setCompletePoemInput] = useState(false);\n\n\n    let api = useApi();\n    const [submitLineStatus, setSubmitLineStatus] = useState(REQ_STATUS.NOT_STARTED);\n    const activeVoting = getActiveVotingFromPoem(poem)\n    useEffect(() => {\n        // Create lines placeholder once\n        const ac = new AbortController();\n        let linesSkeletonArr = [];\n        for (let i = 0; i < SKEL_LINE_NUM; i++)\n            linesSkeletonArr.push(<Skeleton key={'lines-pholder-' + i}\n                                            width={randInt(MIN_SKEL_LENGTH, MAX_SKEL_LENGTH)}/>)\n        setLinesSkeleton(linesSkeletonArr)\n        return () => ac.abort();\n    }, []);\n\n    const submitLine = () => {\n        let poemId = poem.id;\n        let content = newLineInput;\n        if (!content || !content.length || content.length === 0) return;\n\n        setSubmitLineStatus(REQ_STATUS.LOADING)\n        api.submitLine(poemId, content, completePoemInput).then(response => {\n            if (response.status === \"success\") {\n                // Line successfully submitted, Poem is inside response.\n                setSubmitLineStatus(REQ_STATUS.SUCCESS);\n                setTimeout(() => setSubmitLineStatus(REQ_STATUS.NOT_STARTED), 500)\n                setPoem(response.data)\n                setNewLineInput(\"\");\n            } else {\n                setSubmitLineStatus(REQ_STATUS.FAIL);\n                showError(getErrorMessage(LINE_SEND_ERR));\n                console.error(response.message);\n            }\n        });\n    };\n\n    const inputValid = () => newLineInput.length > 0;\n    const handleNewLineInput = (event) => {\n        setNewLineInput(event.target.value)\n    }\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter' && inputValid()) {\n            submitLine()\n        }\n    }\n    const handleCompletePoemInput = (event) => setCompletePoemInput(event.target.checked)\n\n\n    const onVoteInput = (event) => {\n        let forCompletingPoem = (event.target.id === \"voteCompletePoemCheckbox\");\n        api.castCompletionVote(activeVoting.id, forCompletingPoem).then(response => {\n            if (response.status === \"success\") {\n                api.updateNeedsToVote();\n                setPoem(response.data);\n                try {\n                    showSuccess(response.data.completed ? `You had the final word. \"${response.data.title}\" is complete.` :\n                        (response.data.completionVotings.filter(v => v.id === activeVoting.id)[0].status === \"stopped\"\n                            ? \"Vote casted. The Poem goes on.\" : \"Vote casted.\"))\n                } catch(e) {\n                    showSuccess(\"Vote casted.\")\n                }\n            } else {\n                event.target.checked = false;\n                showError(response.message);\n            }\n        })\n    };\n\n    if (!poem)\n        return <div className=\"poem\"/>\n    let contributors = poem.lines.filter(line => line.creator !== poem.creator)\n        .map(line => line.creator === user.nickname ? 'you' : line.creator).filter(onlyUnique);\n    if (contributors.length > 4) contributors = contributors.slice(0, 2).concat(\"...\")\n\n    return <div className={\"poem \" + (canAddLineToPoem(poem, user) ? \"poem-editable \" : \"\")}>\n        <div className=\"poem-title-con\">\n            <h3 className=\"poem-title\">{poem.title}</h3>\n            <span className=\"small-boxy poem-title-creator\">\n                by {poem.creator === user.nickname ? <span className='personal'>you</span> : poem.creator}\n                {contributors.length === 0 ? null : \" feat. \" + contributors.join(', ')}\n            </span>\n        </div>\n        <div className={\"poem-main\"}>\n        {showSkeleton ? linesSkeleton :\n            poem.lines && poem.lines.map((line, index) =>\n                <Line key={\"line-\" + poem.id + index} line={line} authored={line.creator === user.nickname}/>\n            )\n        }\n        {(!showSkeleton && activeVoting === null && canAddLineToPoem(poem, user)) && <div>\n            <input required={true} maxLength={42}\n                   className={\"line poem-input-field \" + getRequestStatusClass(submitLineStatus)}\n                   value={newLineInput} onChange={handleNewLineInput}\n                   type=\"text\" onKeyDown={handleKeyDown} autoFocus={true} placeholder=\"Go off...\"/>\n            <div className={\"add-line-input-con \" + (inputValid() ? \"\" : \"hidden\")}>\n                <span className={\"add-line-input-complete-con\"}>\n                    <input type=\"checkbox\" id=\"completePoemCheckbox\" checked={completePoemInput}\n                           onChange={handleCompletePoemInput}/>\n                    <label htmlFor={\"completePoemCheckbox\"}>My line should end the poem. <span\n                        className={\"small-label-subtext\"}>starts vote among your co-authors</span></label>\n                </span>\n                <span className={\"add-poem-btn\"} onClick={submitLine}>Add Line\n                                <span className=\"pen-emoji\"/>️\n                </span>\n            </div>\n        </div>}\n        {activeVoting !== null && <div className={\"poem-active-voting\"}>\n            <span className={\"poem-active-voting-title\"}>\n                {activeVoting.creator === user.nickname ? \"You thought\" : activeVoting.creator + \" thinks\"} it's time to wrap this poem up.\n            </span>\n            {activeVoting.userVoted ?\n                <div className={\"poem-active-voting-info\"}>\n                    {activeVoting.votesFor + activeVoting.votesAgainst > 3 ? (activeVoting.votesFor > activeVoting.votesAgainst ?\n                        \"Most of your co-authors agree.\" :\n                        (activeVoting.votesFor === activeVoting.votesAgainst ?\n                            \"Oh, this is a controversial one! It's a tie.\" : \"Most of your co-authors do not agree\"))\n                        : (activeVoting.creator === user.nickname ? \"Let's see what the others say...\" : \"\")}\n                </div>\n                : <div className={\"poem-active-voting-choice-con\"}>\n                    What do you think?\n                    <div className={\"poem-active-voting-input-con\"}>\n                        <span className={\"poem-active-voting-input\"}>\n                            <input type=\"checkbox\" id=\"voteCompletePoemCheckbox\" onChange={onVoteInput}/>\n                            <label htmlFor={\"voteCompletePoemCheckbox\"}>Agreed.</label>\n                        </span>\n                        <span className={\"poem-active-voting-input\"}>\n                            <input type=\"checkbox\" id=\"voteContinuePoemCheckbox\" onChange={onVoteInput}/>\n                            <label htmlFor={\"voteContinuePoemCheckbox\"}>Not so fast...</label>\n                        </span>\n                    </div>\n                </div>}\n        </div>}\n        </div>\n\n        <div className={\"poem-footer small-boxy\"}>\n                    <span className=\"poem-date\">\n                        Started {timestampToShortString(poem.dateCreated)}\n                        {poem.completed && `, completed ${timestampToShortString(getPoemDateCompleted(poem))}`}\n                    </span>\n        </div>\n    </div>\n}\n\nexport default Poem\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/PoemsOverview/PoemPreview.js",["126","127"],"import React, {useState} from \"react\"\nimport \"./read-page.css\"\nimport {REQ_STATUS, timestampToShortString, getActiveVotingFromPoem} from \"../../helpers/utils\";\n\nimport Tilt from 'react-parallax-tilt';\nimport {useAuth0} from \"../../helpers/react-auth0-spa\";\nimport {Link} from \"react-router-dom\";\nimport {useMediaQuery} from \"react-responsive/src\";\n\nconst PREVIEW_LINES_NUM = 12;\nconst MAX_TILT_ANGLE = 8;\n\nfunction PoemPreview({poem, linkPrefix}) {\n    const {user} = useAuth0();\n    if (!linkPrefix) linkPrefix = '';\n    const userCanHover = !useMediaQuery({\n        query: '(hover: none)'\n    })\n    const activeVoting = getActiveVotingFromPoem(poem)\n    const userNeedsToVote = activeVoting !== null && !activeVoting.userVoted;\n    return <Link to={linkPrefix + '/' + poem.id}>\n        <Tilt tiltEnable={userCanHover && !poem.completed} tiltReverse={true} tiltMaxAngleX={MAX_TILT_ANGLE} tiltMaxAngleY={MAX_TILT_ANGLE}\n              className={\"poem-preview \" + (poem.completed ? \"completed \" : \"\") + (userNeedsToVote ? \"voting-active\" : \"\")}>\n            <h3>{poem.title}</h3>\n            <div className=\"poem-preview-content\">\n                <p>\n                    {poem.lines && poem.lines.slice(0, PREVIEW_LINES_NUM).map((line, idx) =>\n                        <li className={\"poem-preview-line\" + (line.creator === user.nickname ? ' personal' : '')} key={\"my-preview-\" + idx}\n                            style={{\n                                opacity: 1 - (idx + 1) / PREVIEW_LINES_NUM\n                            }}>\n                            {line.content}\n                        </li>)}\n                </p>\n            </div>\n            {userNeedsToVote ?  <div className={\"poem-preview-votemsg\"}>\n                    <div>One of your co-authors thinks this poem is done. Do you agree?</div>\n                    <div className={\"small-boxy small-boxy-btn\"}>Go Vote</div>\n            </div>\n                : <div className=\"poem-preview-footer small-boxy\">\n                <span className=\"poem-preview-date\">{timestampToShortString(poem.dateCreated, true)}</span>\n                <span className=\"poem-preview-creator\">started by {poem.creator === user.nickname ?\n                    <span className='personal'>you</span> : poem.creator}</span>\n            </div>}\n        </Tilt>\n    </Link>\n}\n\nexport default PoemPreview\n","/home/mikhailandreev/Documents/code_go/poems/front-end/src/components/Poem/Line.js",[],"/home/mikhailandreev/Documents/code_go/poems/front-end/src/helpers/canAddLineToPoem.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":2,"column":39,"nodeType":"134","messageId":"135","endLine":2,"endColumn":47},{"ruleId":"132","severity":1,"message":"136","line":11,"column":8,"nodeType":"134","messageId":"135","endLine":11,"endColumn":24},{"ruleId":"132","severity":1,"message":"137","line":4,"column":9,"nodeType":"134","messageId":"135","endLine":4,"endColumn":15},{"ruleId":"132","severity":1,"message":"138","line":1,"column":39,"nodeType":"134","messageId":"135","endLine":1,"endColumn":47},{"ruleId":"139","severity":1,"message":"140","line":15,"column":5,"nodeType":"134","endLine":15,"endColumn":14,"suggestions":"141"},{"ruleId":"139","severity":1,"message":"142","line":28,"column":24,"nodeType":"143","endLine":28,"endColumn":26,"suggestions":"144"},{"ruleId":"132","severity":1,"message":"145","line":7,"column":52,"nodeType":"134","messageId":"135","endLine":7,"endColumn":60},{"ruleId":"139","severity":1,"message":"146","line":40,"column":27,"nodeType":"143","endLine":40,"endColumn":29,"suggestions":"147"},{"ruleId":"132","severity":1,"message":"148","line":2,"column":45,"nodeType":"134","messageId":"135","endLine":2,"endColumn":51},{"ruleId":"139","severity":1,"message":"149","line":46,"column":11,"nodeType":"143","endLine":46,"endColumn":13,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"149","line":54,"column":11,"nodeType":"143","endLine":54,"endColumn":13,"suggestions":"151"},{"ruleId":"139","severity":1,"message":"149","line":63,"column":11,"nodeType":"143","endLine":63,"endColumn":13,"suggestions":"152"},{"ruleId":"139","severity":1,"message":"149","line":67,"column":11,"nodeType":"143","endLine":67,"endColumn":13,"suggestions":"153"},{"ruleId":"139","severity":1,"message":"149","line":71,"column":11,"nodeType":"143","endLine":71,"endColumn":13,"suggestions":"154"},{"ruleId":"139","severity":1,"message":"155","line":75,"column":11,"nodeType":"143","endLine":75,"endColumn":13,"suggestions":"156"},{"ruleId":"139","severity":1,"message":"149","line":78,"column":11,"nodeType":"143","endLine":78,"endColumn":13,"suggestions":"157"},{"ruleId":"139","severity":1,"message":"158","line":98,"column":8,"nodeType":"143","endLine":98,"endColumn":14,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":12,"column":5,"nodeType":"162","messageId":"163","endLine":21,"endColumn":6},{"ruleId":"132","severity":1,"message":"164","line":21,"column":11,"nodeType":"134","messageId":"135","endLine":21,"endColumn":25},{"ruleId":"139","severity":1,"message":"165","line":36,"column":9,"nodeType":"143","endLine":36,"endColumn":19,"suggestions":"166"},{"ruleId":"139","severity":1,"message":"167","line":63,"column":8,"nodeType":"143","endLine":63,"endColumn":10,"suggestions":"168"},{"ruleId":"132","severity":1,"message":"145","line":14,"column":52,"nodeType":"134","messageId":"135","endLine":14,"endColumn":60},{"ruleId":"132","severity":1,"message":"169","line":38,"column":11,"nodeType":"134","messageId":"135","endLine":38,"endColumn":19},{"ruleId":"132","severity":1,"message":"138","line":1,"column":16,"nodeType":"134","messageId":"135","endLine":1,"endColumn":24},{"ruleId":"132","severity":1,"message":"170","line":3,"column":9,"nodeType":"134","messageId":"135","endLine":3,"endColumn":19},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'ReadAllPoemsPage' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateNeedsToVote'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'api' and 'poemid'. Either include them or remove the dependency array.","ArrayExpression",["174"],"'showInfo' is defined but never used.","React Hook useEffect has a missing dependency: 'getRandomPoem'. Either include it or remove the dependency array.",["175"],"'useRef' is defined but never used.","React Hook useCallback has a missing dependency: 'makeRequest'. Either include it or remove the dependency array.",["176"],["177"],["178"],["179"],["180"],"React Hook useCallback has missing dependencies: 'makeRequest' and 'user'. Either include them or remove the dependency array.",["181"],["182"],"React Hook useEffect has missing dependencies: 'register' and 'registered'. Either include them or remove the dependency array.",["183"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'scrollObserver' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'setPoems'. Either exclude it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'getPoemsInit'. Either include it or remove the dependency array.",["185"],"'isMobile' is assigned a value but never used.","'REQ_STATUS' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"192","fix":"195"},{"desc":"192","fix":"196"},{"desc":"192","fix":"197"},{"desc":"198","fix":"199"},{"desc":"192","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [updateNeedsToVote]",{"range":"207","text":"208"},"Update the dependencies array to be: [api, poemid]",{"range":"209","text":"210"},"Update the dependencies array to be: [getRandomPoem]",{"range":"211","text":"212"},"Update the dependencies array to be: [makeRequest]",{"range":"213","text":"214"},{"range":"215","text":"214"},{"range":"216","text":"214"},{"range":"217","text":"214"},{"range":"218","text":"214"},"Update the dependencies array to be: [makeRequest, user]",{"range":"219","text":"220"},{"range":"221","text":"214"},"Update the dependencies array to be: [register, registered, user]",{"range":"222","text":"223"},"Update the dependencies array to be: []",{"range":"224","text":"225"},"Update the dependencies array to be: [getPoemsInit]",{"range":"226","text":"227"},[504,510],"[updateNeedsToVote]",[1008,1010],"[api, poemid]",[1631,1633],"[getRandomPoem]",[1714,1716],"[makeRequest]",[1991,1993],[2358,2360],[2512,2514],[2663,2665],[2822,2824],"[makeRequest, user]",[3011,3013],[3614,3620],"[register, registered, user]",[1642,1652],"[]",[2506,2508],"[getPoemsInit]"]